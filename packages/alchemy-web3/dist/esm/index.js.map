{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fetchPonyfill from \"fetch-ponyfill\";\r\nimport Web3 from \"web3\";\r\nimport { JsonRpcPayload } from \"web3-providers\";\r\nimport { JsonRPCRequest, JsonRPCResponse } from \"web3/providers\";\r\nimport { Subprovider } from \"@0x/subproviders\";\r\nimport { JSONRPCRequestPayload } from \"ethereum-types\";\r\n\r\n//import { VERSION } from \"./version\";\r\n\r\nconst { fetch, Headers } = fetchPonyfill();\r\n\r\nconst RATE_LIMIT_STATUS = 429;\r\nconst DEFAULT_MAX_RETRIES = 3;\r\nconst DEFAULT_RETRY_INTERVAL = 1000;\r\nconst DEFAULT_RETRY_JITTER = 250;\r\n\r\nexport type ErrorCallback = (err: Error | null, data?: any) => void;\r\nexport type Callback = () => void;\r\n\r\nexport interface AlchemyWeb3Config {\r\n  writeProvider?: Provider | null;\r\n  maxRetries?: number;\r\n  retryInterval?: number;\r\n  retryJitter?: number;\r\n}\r\n\r\ntype FullConfig = { [K in keyof AlchemyWeb3Config]-?: AlchemyWeb3Config[K] };\r\n\r\nexport type Provider =\r\n  | {\r\n      sendAsync: SendFunction;\r\n    }\r\n  | {\r\n      send: SendFunction;\r\n    };\r\n\r\nexport type SendFunction = (payload: any, callback: any) => void;\r\n\r\nexport interface AlchemyWeb3 extends Web3 {\r\n  alchemy: AlchemyMethods;\r\n  setWriteProvider(provider: Provider): void;\r\n}\r\n\r\nexport interface AlchemyMethods {\r\n  getTokenAllowance(\r\n    params: TokenAllowanceParams,\r\n    callback?: Web3Callback<TokenAllowanceResponse>,\r\n  ): Promise<TokenAllowanceResponse>;\r\n  getTokenBalances(\r\n    address: string,\r\n    contractAddresses: string[],\r\n    callback?: Web3Callback<TokenBalancesResponse>,\r\n  ): Promise<TokenBalancesResponse>;\r\n  getTokenMetadata(\r\n    address: string,\r\n    callback?: Web3Callback<TokenMetadataResponse>,\r\n  ): Promise<TokenMetadataResponse>;\r\n}\r\n\r\nexport interface TokenAllowanceParams {\r\n  contract: string;\r\n  owner: string;\r\n  spender: string;\r\n}\r\n\r\nexport type TokenAllowanceResponse = string;\r\n\r\nexport interface TokenBalancesResponse {\r\n  address: string;\r\n  tokenBalances: TokenBalance[];\r\n}\r\n\r\nexport type TokenBalance = TokenBalanceSuccess | TokenBalanceFailure;\r\n\r\nexport interface TokenBalanceSuccess {\r\n  address: string;\r\n  tokenBalance: string;\r\n  error: null;\r\n}\r\n\r\nexport interface TokenBalanceFailure {\r\n  address: string;\r\n  tokenBalance: null;\r\n  error: string;\r\n}\r\n\r\nexport interface TokenMetadataResponse {\r\n  decimals: number | null;\r\n  logo: string | null;\r\n  name: string | null;\r\n  symbol: string | null;\r\n}\r\n\r\nexport type Web3Callback<T> = (error: Error | null, result?: T) => void;\r\n\r\ninterface EthereumWindow extends Window {\r\n  ethereum?: any;\r\n}\r\n\r\ndeclare const window: EthereumWindow;\r\n\r\nconst ALCHEMY_DISALLOWED_METHODS: string[] = [\r\n  \"eth_accounts\",\r\n  \"eth_sendRawTransaction\",\r\n  \"eth_sendTransaction\",\r\n  \"eth_sign\",\r\n  \"eth_signTypedData_v3\",\r\n  \"eth_signTypedData\",\r\n  \"personal_sign\",\r\n];\r\n\r\nconst ALCHEMY_HEADERS = new Headers({\r\n  //\"Accept\": \"application/json\",\r\n  //\"Content-Type\": \"text/plain\"\r\n  //\"Content-Type\": \"application/json\",\r\n  //\"Alchemy-Web3-Version\": VERSION, // causes excessive OPTIONS requests\r\n});\r\n\r\nexport function createAlchemyWeb3(\r\n  alchemyUrl: string,\r\n  config: AlchemyWeb3Config,\r\n): AlchemyWeb3 {\r\n  const fullConfig = fillInConfigDefaults(config);\r\n  let currentProvider = fullConfig.writeProvider;\r\n  function sendAsync(\r\n    payload: JsonRpcPayload,\r\n    callback: Web3Callback<JsonRPCResponse>,\r\n  ): void {\r\n    callWhenDone(\r\n      promisedSend(payload, alchemyUrl, currentProvider, fullConfig),\r\n      callback,\r\n    );\r\n  }\r\n  const alchemyWeb3 = new Web3({ sendAsync } as any) as AlchemyWeb3;\r\n  alchemyWeb3.setProvider = () => {\r\n    throw new Error(\r\n      \"setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.\",\r\n    );\r\n  };\r\n  alchemyWeb3.setWriteProvider = provider => (currentProvider = provider);\r\n  alchemyWeb3.alchemy = {\r\n    getTokenAllowance: (params: TokenAllowanceParams, callback) =>\r\n      callAlchemyMethod({\r\n        alchemyUrl,\r\n        callback,\r\n        params: [params],\r\n        method: \"alchemy_getTokenAllowance\",\r\n        config: fullConfig,\r\n      }),\r\n    getTokenBalances: (address, contractAddresses, callback) =>\r\n      callAlchemyMethod({\r\n        alchemyUrl,\r\n        callback,\r\n        method: \"alchemy_getTokenBalances\",\r\n        params: [address, contractAddresses],\r\n        processResponse: processTokenBalanceResponse,\r\n        config: fullConfig,\r\n      }),\r\n    getTokenMetadata: (address, callback) =>\r\n      callAlchemyMethod({\r\n        alchemyUrl,\r\n        callback,\r\n        params: [address],\r\n        method: \"alchemy_getTokenMetadata\",\r\n        config: fullConfig,\r\n      }),\r\n  };\r\n  return alchemyWeb3;\r\n}\r\n\r\nexport class AlchemySubprovider extends Subprovider {\r\n  private readonly alchemyUrl: string;\r\n  private readonly config: AlchemyWeb3Config;\r\n  public readonly alchemy: AlchemyMethods;\r\n\r\n  /**\r\n   * Instantiates a new AlchemySubprovider\r\n   */\r\n  constructor(alchemyUrl: string, config: AlchemyWeb3Config) {\r\n    super();\r\n\r\n    this.alchemyUrl = alchemyUrl;\r\n    this.config = fillInConfigDefaults(config);\r\n    this.alchemy = {\r\n      getTokenAllowance: (params: TokenAllowanceParams, callback) =>\r\n        callAlchemyMethod({\r\n          alchemyUrl,\r\n          callback,\r\n          params: [params],\r\n          method: \"alchemy_getTokenAllowance\",\r\n          config: this.config as FullConfig,\r\n        }),\r\n      getTokenBalances: (address, contractAddresses, callback) =>\r\n        callAlchemyMethod({\r\n          alchemyUrl,\r\n          callback,\r\n          method: \"alchemy_getTokenBalances\",\r\n          params: [address, contractAddresses],\r\n          processResponse: processTokenBalanceResponse,\r\n          config: this.config as FullConfig,\r\n        }),\r\n      getTokenMetadata: (address, callback) =>\r\n        callAlchemyMethod({\r\n          alchemyUrl,\r\n          callback,\r\n          params: [address],\r\n          method: \"alchemy_getTokenMetadata\",\r\n          config: this.config as FullConfig,\r\n        }),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This method conforms to the web3-provider-engine interface.\r\n   * It is called internally by the ProviderEngine when it is this subproviders\r\n   * turn to handle a JSON RPC request.\r\n   * @param payload JSON RPC payload\r\n   * @param next Callback to call if this subprovider decides not to handle the request\r\n   * @param end Callback to call if subprovider handled the request and wants to pass back the request.\r\n   */\r\n  public async handleRequest(\r\n    payload: JSONRPCRequestPayload,\r\n    next: Callback,\r\n    end: ErrorCallback,\r\n  ): Promise<void> {\r\n    if (ALCHEMY_DISALLOWED_METHODS.indexOf(payload.method) === -1) {\r\n      try {\r\n        const data = await sendToAlchemyWithRetries(\r\n          payload,\r\n          this.alchemyUrl,\r\n          this.config as FullConfig,\r\n        );\r\n        if (data.error) {\r\n          next();\r\n          return;\r\n        }\r\n        end(null, data.result);\r\n        return;\r\n      } catch (alchemyError) {\r\n        next();\r\n        return;\r\n      }\r\n    } else {\r\n      next();\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction fillInConfigDefaults({\r\n  writeProvider = getWindowProvider(),\r\n  maxRetries = DEFAULT_MAX_RETRIES,\r\n  retryInterval = DEFAULT_RETRY_INTERVAL,\r\n  retryJitter = DEFAULT_RETRY_JITTER,\r\n}: AlchemyWeb3Config): FullConfig {\r\n  return { writeProvider, maxRetries, retryInterval, retryJitter };\r\n}\r\n\r\nasync function promisedSend(\r\n  payload: JsonRpcPayload,\r\n  alchemyUrl: string,\r\n  writeProvider: Provider | null,\r\n  config: FullConfig,\r\n): Promise<JsonRPCResponse> {\r\n  if (ALCHEMY_DISALLOWED_METHODS.indexOf(payload.method) === -1) {\r\n    try {\r\n      return await sendToAlchemyWithRetries(payload, alchemyUrl, config);\r\n    } catch (alchemyError) {\r\n      // Fallback to write provider, but if both fail throw the error from\r\n      // Alchemy.\r\n      if (!writeProvider) {\r\n        throw alchemyError;\r\n      }\r\n      try {\r\n        return await sendToProvider(payload, writeProvider);\r\n      } catch {\r\n        throw alchemyError;\r\n      }\r\n    }\r\n  } else {\r\n    if (!writeProvider) {\r\n      throw new Error(`No provider available for method \"${payload.method}\"`);\r\n    }\r\n    return sendToProvider(payload, writeProvider);\r\n  }\r\n}\r\n\r\nasync function sendToAlchemyWithRetries(\r\n  payload: JsonRpcPayload,\r\n  alchemyUrl: string,\r\n  { maxRetries, retryInterval, retryJitter }: FullConfig,\r\n): Promise<JsonRPCResponse> {\r\n  let lastResponse: Response;\r\n  for (let i = 0; i < maxRetries + 1; i++) {\r\n    lastResponse = await sendToAlchemyOnce(payload, alchemyUrl);\r\n    if (lastResponse.status !== RATE_LIMIT_STATUS) {\r\n      return lastResponse.json();\r\n    }\r\n    await delay(retryInterval + ((retryJitter * Math.random()) | 0));\r\n  }\r\n  return lastResponse!.json();\r\n}\r\n\r\nfunction sendToAlchemyOnce(\r\n  payload: JsonRpcPayload,\r\n  alchemyUrl: string,\r\n): Promise<Response> {\r\n  return fetch(alchemyUrl, {\r\n    method: \"POST\",\r\n    headers: ALCHEMY_HEADERS,\r\n    body: JSON.stringify(payload),\r\n  });\r\n}\r\n\r\nfunction sendToProvider(\r\n  payload: JsonRpcPayload,\r\n  provider: Provider,\r\n): Promise<JsonRPCResponse> {\r\n  const anyProvider: any = provider;\r\n  if (anyProvider.sendAsync) {\r\n    return promisify(callback => anyProvider.sendAsync(payload, callback));\r\n  } else {\r\n    return promisify(callback => anyProvider.send(payload, callback));\r\n  }\r\n}\r\n\r\nfunction getWindowProvider(): Provider | null {\r\n  return typeof window !== \"undefined\" ? window.ethereum : null;\r\n}\r\n\r\ninterface CallAlchemyMethodParams<T> {\r\n  method: string;\r\n  params: any[];\r\n  alchemyUrl: string;\r\n  config: FullConfig;\r\n  callback?: Web3Callback<T>;\r\n  processResponse?(response: any): T;\r\n}\r\n\r\nfunction callAlchemyMethod<T>({\r\n  method,\r\n  params,\r\n  alchemyUrl,\r\n  config,\r\n  callback = noop,\r\n  processResponse = identity,\r\n}: CallAlchemyMethodParams<T>): Promise<T> {\r\n  const promise = (async () => {\r\n    const payload: JsonRPCRequest = { method, params, jsonrpc: \"2.0\", id: 0 };\r\n    const { error, result } = await sendToAlchemyWithRetries(\r\n      payload,\r\n      alchemyUrl,\r\n      config,\r\n    );\r\n    if (error != null) {\r\n      throw new Error(error);\r\n    }\r\n    return processResponse(result);\r\n  })();\r\n  callWhenDone(promise, callback);\r\n  return promise;\r\n}\r\n\r\nfunction processTokenBalanceResponse(\r\n  rawResponse: TokenBalancesResponse,\r\n): TokenBalancesResponse {\r\n  // Convert token balance fields from hex-string to decimal-string.\r\n  const fixedTokenBalances = rawResponse.tokenBalances.map(balance =>\r\n    balance.tokenBalance != null\r\n      ? { ...balance, tokenBalance: hexToDecimal(balance.tokenBalance) }\r\n      : balance,\r\n  );\r\n  return { ...rawResponse, tokenBalances: fixedTokenBalances };\r\n}\r\n\r\n/**\r\n * Helper for converting functions which take a callback as their final argument\r\n * to functions which return a promise.\r\n */\r\nfunction promisify<T>(f: (callback: Web3Callback<T>) => void): Promise<T> {\r\n  return new Promise((resolve, reject) =>\r\n    f((error, result) => {\r\n      if (error != null) {\r\n        reject(error);\r\n      } else {\r\n        resolve(result);\r\n      }\r\n    }),\r\n  );\r\n}\r\n\r\n/**\r\n * Helper for converting functions which return a promise to functions which\r\n * take a callback as their final argument.\r\n */\r\nfunction callWhenDone<T>(promise: Promise<T>, callback: Web3Callback<T>): void {\r\n  promise.then(result => callback(null, result), error => callback(error));\r\n}\r\n\r\nfunction delay(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\n/**\r\n * Converts a hex string to a string of a decimal number. Works even with\r\n * numbers so large that they cannot fit into a double without losing precision.\r\n */\r\nfunction hexToDecimal(hex: string): string {\r\n  if (hex.startsWith(\"0x\")) {\r\n    return hexToDecimal(hex.slice(2));\r\n  }\r\n  // https://stackoverflow.com/a/21675915/2695248\r\n  const digits = [0];\r\n  for (let i = 0; i < hex.length; i += 1) {\r\n    let carry = parseInt(hex.charAt(i), 16);\r\n    for (let j = 0; j < digits.length; j += 1) {\r\n      digits[j] = digits[j] * 16 + carry;\r\n      carry = (digits[j] / 10e16) | 0;\r\n      digits[j] %= 10e16;\r\n    }\r\n    while (carry > 0) {\r\n      digits.push(carry % 10e16);\r\n      carry = (carry / 10e16) | 0;\r\n    }\r\n  }\r\n  return digits.reverse().join(\"\");\r\n}\r\n\r\nfunction noop(): void {\r\n  // Nothing.\r\n}\r\n\r\nfunction identity<T>(x: T): T {\r\n  return x;\r\n}\r\n"]}